basePath: /api/v1
definitions:
  models.CreateOrgUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
      role_name:
        description: Only allow staff or manager roles
        enum:
        - staff
        - manager
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - role_name
    type: object
  models.CreateOrganizationRequest:
    properties:
      description:
        type: string
      logo_url:
        type: string
      name:
        type: string
      website_url:
        type: string
    required:
    - name
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  models.Event:
    properties:
      available:
        type: integer
      capacity:
        minimum: 1
        type: integer
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      id:
        type: integer
      location:
        type: string
      price:
        minimum: 0
        type: number
      start_date:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    required:
    - capacity
    - end_date
    - price
    - start_date
    - title
    type: object
  models.EventCreateRequest:
    properties:
      capacity:
        minimum: 1
        type: integer
      description:
        type: string
      end_date:
        type: string
      location:
        type: string
      price:
        minimum: 0
        type: number
      start_date:
        type: string
      title:
        type: string
    required:
    - capacity
    - end_date
    - price
    - start_date
    - title
    type: object
  models.EventUpdateRequest:
    properties:
      capacity:
        minimum: 1
        type: integer
      description:
        type: string
      end_date:
        type: string
      location:
        type: string
      price:
        minimum: 0
        type: number
      start_date:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.OrganizationResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      logo_url:
        type: string
      name:
        type: string
      organizer_id:
        type: string
      updated_at:
        type: string
      website_url:
        type: string
    type: object
  models.PermissionResponse:
    properties:
      action:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      resource:
        type: string
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.ResetPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.RoleResponse:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/models.PermissionResponse'
        type: array
    type: object
  models.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        description: in seconds
        type: integer
      refresh_token:
        type: string
      token_type:
        description: '"Bearer"'
        type: string
    type: object
  models.UpdateOrgUserRequest:
    properties:
      active:
        type: boolean
      role_type:
        description: Only allow staff or manager roles
        enum:
        - staff
        - manager
        type: string
    required:
    - role_type
    type: object
  models.UpdateOrganizationRequest:
    properties:
      description:
        type: string
      logo_url:
        type: string
      name:
        type: string
      website_url:
        type: string
    type: object
  models.UpdatePasswordRequest:
    properties:
      confirm_password:
        type: string
      new_password:
        minLength: 8
        type: string
      reset_token:
        type: string
    required:
    - confirm_password
    - new_password
    - reset_token
    type: object
  models.UpdateUserRoleRequest:
    properties:
      role_name:
        description: Only allow staff or manager roles
        enum:
        - staff
        - manager
        type: string
      user_id:
        type: string
    required:
    - role_name
    - user_id
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_email_verified:
        type: boolean
      last_name:
        type: string
      organization:
        $ref: '#/definitions/models.OrganizationResponse'
      organization_id:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.RoleResponse'
        type: array
      updated_at:
        type: string
    type: object
  models.VerifyEmailRequest:
    properties:
      verification_code:
        type: string
    required:
    - verification_code
    type: object
  utils.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A scalable REST API for event ticketing system with secure authentication
    and role-based access control (RBAC)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Event Ticketing API
  version: "1.0"
paths:
  /api/v1/events:
    get:
      description: Get a list of all events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Event'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get all events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create a new event with the provided details
      parameters:
      - description: Event details
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/models.EventCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Event'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Create a new event
      tags:
      - events
  /api/v1/events/{id}:
    delete:
      description: Delete an event by ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Delete an event
      tags:
      - events
    get:
      description: Get details of a specific event by ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Event'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get event by ID
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Update event details by ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated event details
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/models.EventUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Event'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Update an event
      tags:
      - events
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password to get JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Authenticate user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Revoke user's refresh tokens
      parameters:
      - description: Revoke all refresh tokens for the user
        in: query
        name: all
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/profile:
    get:
      description: Get authenticated user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get new access and refresh tokens using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Register a new user
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password with reset token
      parameters:
      - description: New password and reset token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Reset password
      tags:
      - auth
  /auth/reset-password-request:
    post:
      consumes:
      - application/json
      description: Send a password reset email
      parameters:
      - description: Email address
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Request password reset
      tags:
      - auth
  /auth/verify-email:
    post:
      consumes:
      - application/json
      description: Verify user email with verification code
      parameters:
      - description: Email verification code
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Verify email address
      tags:
      - auth
  /health/db:
    get:
      responses: {}
  /organizations:
    get:
      consumes:
      - application/json
      description: Retrieves all organizations the current user is associated with
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.OrganizationResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Get organizations for current user
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Creates a new organization with the current user as the organizer
      parameters:
      - description: Organization data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrganizationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.OrganizationResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new organization
      tags:
      - organizations
  /organizations/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an organization and all associated data
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete an organization
      tags:
      - organizations
    get:
      consumes:
      - application/json
      description: Retrieves organization details by ID
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.OrganizationResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Get organization by ID
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: Updates details of an organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Organization data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.OrganizationResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Update an organization
      tags:
      - organizations
  /organizations/{id}/users:
    get:
      consumes:
      - application/json
      description: Retrieves all users associated with the specified organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.UserResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Get users in an organization
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Creates a new user with staff or manager role within the organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrgUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new user in organization
      tags:
      - organizations
  /organizations/{id}/users/{userId}:
    delete:
      consumes:
      - application/json
      description: Removes a user from the organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a user from organization
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: Updates role or status of a user within the organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateOrgUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a user in organization
      tags:
      - organizations
  /organizations/{orgId}:
    get:
      description: Gets details of a specific organization
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.OrganizationResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Get organization details
      tags:
      - organizations
  /organizations/{orgId}/users:
    get:
      description: Gets all users belonging to the organization
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.UserResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all users in organization
      tags:
      - organizations
  /organizations/{orgId}/users/role:
    put:
      consumes:
      - application/json
      description: Updates a user's role within the organization
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Role update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a user's role in organization
      tags:
      - organizations
  /organizations/mine:
    get:
      description: Gets all organizations where the user is an organizer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.OrganizationResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      summary: Get user's organizations
      tags:
      - organizations
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    description: 'JWT token authentication. Use the ''Bearer'' prefix followed by
      a space and the access token. Example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
