services:
  postgres:
    image: postgres:15-alpine
    container_name: event_ticketing_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-event_ticketing}
      TIMEZONE: UTC
    ports:
      - "5436:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: event_ticketing_redis
    env_file:
      - .env
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
      # Enable BuildKit for faster builds
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: event_ticketing_api
    env_file:
      - .env
    environment:
      # Override specific vars for Docker networking
      DB_HOST: postgres
      REDIS_HOST: redis
    ports:
      - "${PORT:-8082}:8082"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

volumes:
  postgres_data:
  redis_data:
